package com.sap.cloud.security.xsuaa.token.flows;

import com.sap.cloud.security.xsuaa.backend.OAuth2Server;
import org.springframework.security.oauth2.jwt.Jwt;
import org.springframework.util.Assert;

import java.net.URI;
import java.util.Map;

/**
 * A client credentials flow builder class. Applications retrieve an instance of
 * this builder from {@link XsuaaTokenFlows} and then create the flow request
 * using a builder pattern.
 */
public class ClientCredentialsTokenFlow {
	private OAuth2Server oAuth2Server;
	private XsuaaTokenFlowRequest request;
	private VariableKeySetUriTokenDecoder tokenDecoder;

	/**
	 * Creates a new instance.
	 *
	 * @param oAuth2Server
	 *            - the {@link OAuth2Server} used to execute the final request.
	 * @param tokenDecoder
	 * 			  - the token decoder
	 */
	ClientCredentialsTokenFlow(OAuth2Server oAuth2Server, VariableKeySetUriTokenDecoder tokenDecoder) {
		Assert.notNull(oAuth2Server, "OAuth2Server must not be null.");
		Assert.notNull(tokenDecoder, "TokenDecoder must not be null.");

		this.oAuth2Server = oAuth2Server;
		this.tokenDecoder = tokenDecoder;

		this.request = new XsuaaTokenFlowRequest(oAuth2Server);
	}

	/**
	 * Adds the OAuth 2.0 client ID to the request.<br>
	 * The ID needs to be that of the OAuth client that requests the token.
	 * 
	 * @param clientId
	 *            - the ID of the OAuth 2.0 client requesting the token.
	 * @return this builder.
	 */
	public ClientCredentialsTokenFlow client(String clientId) {
		request.setClientId(clientId);
		return this;
	}

	/**
	 * Adds the OAuth 2.0 client's secret to this request.<br>
	 * The secret needs to be the one of the client that requests the token.
	 * 
	 * @param clientSecret
	 *            - the secret of the OAuth 2.0 client requesting the token.
	 * @return this builder.
	 */
	public ClientCredentialsTokenFlow secret(String clientSecret) {
		request.setClientSecret(clientSecret);
		return this;
	}

	/**
	 * Adds additional authorization attributes to the request. <br>
	 * Clients can use this to request additional attributes in the
	 * {@code 'az_attr'} claim of the returned token.
	 * 
	 * @param additionalAuthorizationAttributes
	 *            - the additional attributes.
	 * @return this builder.
	 */
	public ClientCredentialsTokenFlow attributes(Map<String, String> additionalAuthorizationAttributes) {
		this.request.setAdditionalAuthorizationAttributes(additionalAuthorizationAttributes);
		return this;
	}

	/**
	 * Executes the token flow and returns a JWT token from XSUAA.
	 * 
	 * @return the JWT token generated by XSUAA.
	 * @throws TokenFlowException
	 *             in case of token flow errors.
	 */
	public Jwt execute() throws TokenFlowException {
		checkRequest(request);

		String encodedJwtTokenValue = oAuth2Server.requestTechnicalUserToken(request.getAdditionalAuthorizationAttributes(), request.getClientId(), request.getClientSecret());
		return decode(encodedJwtTokenValue, request.getKeySetEndpoint());
	}

	/**
	 * Checks if the built request is valid. Throws an exception if not all
	 * mandatory fields are filled.
	 * 
	 * @param request
	 *            - the token flow request.
	 * @throws TokenFlowException
	 *             in case the request does not have all mandatory fields set.
	 */
	private void checkRequest(XsuaaTokenFlowRequest request) throws TokenFlowException {
		if (!request.isValid()) {
			throw new TokenFlowException(
					"Client credentials flow request is not valid. Make sure all mandatory fields are set.");
		}
	}

	/**
	 * Decodes the returned JWT value.
	 * 
	 * @param encodedToken
	 *            - the encoded JWT token value.
	 * @return the decoded JWT.
	 * @throws TokenFlowException
	 *             in case of an exception decoding the token.
	 */
	private Jwt decode(String encodedToken, URI keySetEndpoint) {

		tokenDecoder.setJwksURI(keySetEndpoint);
		// validation is not required by the one who retrieves the token,
		// but by the one who receives it (e.g. the service it is sent to).
		// Hence, here we only decode, but do not validate.
		// decoder.setJwtValidator(new
		// DelegatingOAuth2TokenValidator<>(tokenValidators));
		Jwt jwt = tokenDecoder.decode(encodedToken);
		return jwt;
	}
}
